// 所有的JS程序在运行时，都会创建一个全局作用域对象（在浏览器端，是window对象；在node上，是global对象）
// 每条作用域链的末端，都是全局作用域对象
// 当用 var 来声明一个变量时，这个变量是属于函数作用域的；
// 当用 let 来声明一个变量时，这个变量是属于块级作用域的。
// 当声明一个变量，既没使用 var，也没使用 let时，这个变量是属于全局作用域的。

// 在JS运行时，变量赋值遵循以下几个步骤：
// 1.在当前作用域中查找指定变量；
// 2.如果没有找到，就搜索外面一层的作用域；
// 3.如果找到了，就转到步骤6;
// 4.如果没有找到，就重复步骤2和3，直到找到全局作用域上；
// 5.如果在全局作用域上也没找到，就在创建一个全局作用域的变量；
// 6.执行最后的赋值操作。
// 简而言之，就是从赋值语句所在的作用域上，顺着作用域链往上找，要是到全局作用域了，都没有找到，就创建一个全局作用域上的变量，再赋值；否则，在哪找到了，直接赋值就可以了。

// shadowing: 是指当在两个不同的作用域里定义了两个不同的变量，而这两个变量具有相同的变量名时，出现的一种现象：
// 外层作用域的同名变量对内存作用域而言，是“不可见的”。

function foo(){
    var bar;
    quux = 'global variable';
    function zip(){
        var quux = 'local variable';
    }
}